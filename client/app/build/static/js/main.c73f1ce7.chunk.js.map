{"version":3,"sources":["dataProvider.js","components/orderList/OrderList.jsx","App.js","index.js"],"names":["API_URL","type","resource","params","fetchJson","fetchUtils","GET_LIST","pagination","page","perPage","sort","field","order","query","JSON","stringify","range","filter","url","GET_ONE","id","GET_MANY","ids","GET_MANY_REFERENCE","target","UPDATE","options","method","body","data","CREATE","DELETE","Error","convertDataProviderRequestToHTTP","then","response","headers","json","map","x","total","parseInt","get","split","pop","convertHTTPResponseToDataProvider","OrderList","props","List","Datagrid","rowClick","TextField","source","App","Admin","dataProvider","Resource","name","list","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c73f1ce7.chunk.js","sourcesContent":["import {\r\n    GET_LIST,\r\n    GET_ONE,\r\n    GET_MANY,\r\n    GET_MANY_REFERENCE,\r\n    CREATE,\r\n    UPDATE,\r\n    DELETE,\r\n    fetchUtils,\r\n} from 'react-admin';\r\nimport { stringify } from 'query-string';\r\n\r\nconst API_URL = 'http://localhost:3000/api/v1';\r\n\r\n/**\r\n * @param {String} type One of the constants appearing at the top of this file, e.g. 'UPDATE'\r\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n * @param {Object} params The Data Provider request params, depending on the type\r\n * @returns {Object} { url, options } The HTTP request parameters\r\n */\r\nconst convertDataProviderRequestToHTTP = (type, resource, params) => {\r\n    switch (type) {\r\n    case GET_LIST: {\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = {\r\n            sort: JSON.stringify([field, order]),\r\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\r\n            filter: JSON.stringify(params.filter),\r\n        };\r\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\r\n    }\r\n    case GET_ONE:\r\n        return { url: `${API_URL}/${resource}/${params.id}` };\r\n    case GET_MANY: {\r\n        const query = {\r\n            filter: JSON.stringify({ id: params.ids }),\r\n        };\r\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\r\n    }\r\n    case GET_MANY_REFERENCE: {\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = {\r\n            sort: JSON.stringify([field, order]),\r\n            range: JSON.stringify([(page - 1) * perPage, (page * perPage) - 1]),\r\n            filter: JSON.stringify({ ...params.filter, [params.target]: params.id }),\r\n        };\r\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\r\n    }\r\n    case UPDATE:\r\n        return {\r\n            url: `${API_URL}/${resource}/${params.id}`,\r\n            options: { method: 'PUT', body: JSON.stringify(params.data) },\r\n        };\r\n    case CREATE:\r\n        return {\r\n            url: `${API_URL}/${resource}`,\r\n            options: { method: 'POST', body: JSON.stringify(params.data) },\r\n        };\r\n    case DELETE:\r\n        return {\r\n            url: `${API_URL}/${resource}/${params.id}`,\r\n            options: { method: 'DELETE' },\r\n        };\r\n    default:\r\n        throw new Error(`Unsupported fetch action type ${type}`);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Object} response HTTP response from fetch()\r\n * @param {String} type One of the constants appearing at the top of this file, e.g. 'UPDATE'\r\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n * @param {Object} params The Data Provider request params, depending on the type\r\n * @returns {Object} Data Provider response\r\n */\r\nconst convertHTTPResponseToDataProvider = (response, type, resource, params) => {\r\n    const { headers, json } = response;\r\n    switch (type) {\r\n    case GET_LIST:\r\n        return {\r\n            data: json.map(x => x),\r\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\r\n        };\r\n    case CREATE:\r\n        return { data: { ...params.data, id: json.id } };\r\n    default:\r\n        return { data: json };\r\n    }\r\n};\r\n\r\n/**\r\n * @param {string} type Request type, e.g GET_LIST\r\n * @param {string} resource Resource name, e.g. \"posts\"\r\n * @param {Object} payload Request parameters. Depends on the request type\r\n * @returns {Promise} the Promise for response\r\n */\r\nexport default (type, resource, params) => {\r\n    const { fetchJson } = fetchUtils;\r\n    const { url, options } = convertDataProviderRequestToHTTP(type, resource, params);\r\n    return fetchJson(url, options)\r\n        .then(response => convertHTTPResponseToDataProvider(response, type, resource, params));\r\n};","// in src/users.js\r\nimport * as React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from 'react-admin';\r\n\r\n const OrderList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"customerName\" />\r\n            <TextField source=\"date\" />\r\n            <TextField source=\"products\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default OrderList","import * as React from \"react\";\nimport jsonServerProvider from 'ra-data-json-server';\nimport { Admin, Resource, ListGuesser, fetchUtils } from 'react-admin';\nimport dataProvider from './dataProvider';\nimport OrderList from './components/orderList/OrderList';\n\n// const httpClient = (url, options = {}) => {\n//   if (!options.headers) {\n//       options.headers = new Headers({ Accept: 'application/json' });\n//   }\n//   // add your own headers here\n//   // options.headers.set('X-Custom-Header', 'foobar');\n//   return fetchUtils.fetchJson(url, options);\n// };\n\n// const dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\nconst App = () => (\n<Admin dataProvider={dataProvider}>\n  <Resource name=\"orders\" list={OrderList} />\n</Admin>\n)\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}